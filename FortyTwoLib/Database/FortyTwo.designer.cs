#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FortyTwoLib.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fortyTwo")]
	public partial class FortyTwoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGamePlayer(GamePlayer instance);
    partial void UpdateGamePlayer(GamePlayer instance);
    partial void DeleteGamePlayer(GamePlayer instance);
    partial void InsertGamePlayerBid(GamePlayerBid instance);
    partial void UpdateGamePlayerBid(GamePlayerBid instance);
    partial void DeleteGamePlayerBid(GamePlayerBid instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSavedHand(SavedHand instance);
    partial void UpdateSavedHand(SavedHand instance);
    partial void DeleteSavedHand(SavedHand instance);
    partial void InsertTrick(Trick instance);
    partial void UpdateTrick(Trick instance);
    partial void DeleteTrick(Trick instance);
    #endregion
		
		public FortyTwoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FortyTwoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FortyTwoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FortyTwoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Game
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<GamePlayer> GamePlayer
		{
			get
			{
				return this.GetTable<GamePlayer>();
			}
		}
		
		public System.Data.Linq.Table<GamePlayerBid> GamePlayerBid
		{
			get
			{
				return this.GetTable<GamePlayerBid>();
			}
		}
		
		public System.Data.Linq.Table<Player> Player
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SavedHand> SavedHand
		{
			get
			{
				return this.GetTable<SavedHand>();
			}
		}
		
		public System.Data.Linq.Table<Trick> Trick
		{
			get
			{
				return this.GetTable<Trick>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_Applications> Vw_aspnet_Applications
		{
			get
			{
				return this.GetTable<Vw_aspnet_Applications>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_MembershipUsers> Vw_aspnet_MembershipUsers
		{
			get
			{
				return this.GetTable<Vw_aspnet_MembershipUsers>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_Profiles> Vw_aspnet_Profiles
		{
			get
			{
				return this.GetTable<Vw_aspnet_Profiles>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_Roles> Vw_aspnet_Roles
		{
			get
			{
				return this.GetTable<Vw_aspnet_Roles>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_Users> Vw_aspnet_Users
		{
			get
			{
				return this.GetTable<Vw_aspnet_Users>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_UsersInRoles> Vw_aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<Vw_aspnet_UsersInRoles>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_WebPartState_Paths> Vw_aspnet_WebPartState_Paths
		{
			get
			{
				return this.GetTable<Vw_aspnet_WebPartState_Paths>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_WebPartState_Shared> Vw_aspnet_WebPartState_Shared
		{
			get
			{
				return this.GetTable<Vw_aspnet_WebPartState_Shared>();
			}
		}
		
		public System.Data.Linq.Table<Vw_aspnet_WebPartState_User> Vw_aspnet_WebPartState_User
		{
			get
			{
				return this.GetTable<Vw_aspnet_WebPartState_User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameId;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _WinningTeam;
		
		private int _HintCount;
		
		private System.Nullable<System.DateTime> _FirstHintDate;
		
		private EntitySet<GamePlayer> _GamePlayer;
		
		private EntitySet<Trick> _Trick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnWinningTeamChanging(int value);
    partial void OnWinningTeamChanged();
    partial void OnHintCountChanging(int value);
    partial void OnHintCountChanged();
    partial void OnFirstHintDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstHintDateChanged();
    #endregion
		
		public Game()
		{
			this._GamePlayer = new EntitySet<GamePlayer>(new Action<GamePlayer>(this.attach_GamePlayer), new Action<GamePlayer>(this.detach_GamePlayer));
			this._Trick = new EntitySet<Trick>(new Action<Trick>(this.attach_Trick), new Action<Trick>(this.detach_Trick));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinningTeam", DbType="Int NOT NULL")]
		public int WinningTeam
		{
			get
			{
				return this._WinningTeam;
			}
			set
			{
				if ((this._WinningTeam != value))
				{
					this.OnWinningTeamChanging(value);
					this.SendPropertyChanging();
					this._WinningTeam = value;
					this.SendPropertyChanged("WinningTeam");
					this.OnWinningTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HintCount", DbType="Int NOT NULL")]
		public int HintCount
		{
			get
			{
				return this._HintCount;
			}
			set
			{
				if ((this._HintCount != value))
				{
					this.OnHintCountChanging(value);
					this.SendPropertyChanging();
					this._HintCount = value;
					this.SendPropertyChanged("HintCount");
					this.OnHintCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstHintDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FirstHintDate
		{
			get
			{
				return this._FirstHintDate;
			}
			set
			{
				if ((this._FirstHintDate != value))
				{
					this.OnFirstHintDateChanging(value);
					this.SendPropertyChanging();
					this._FirstHintDate = value;
					this.SendPropertyChanged("FirstHintDate");
					this.OnFirstHintDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GamePlayer_GameId", Storage="_GamePlayer", ThisKey="GameId", OtherKey="GameId", DeleteRule="NO ACTION")]
		public EntitySet<GamePlayer> GamePlayer
		{
			get
			{
				return this._GamePlayer;
			}
			set
			{
				this._GamePlayer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Trick_GameId", Storage="_Trick", ThisKey="GameId", OtherKey="GameId", DeleteRule="NO ACTION")]
		public EntitySet<Trick> Trick
		{
			get
			{
				return this._Trick;
			}
			set
			{
				this._Trick.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlayer(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GamePlayer(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Trick(Trick entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Trick(Trick entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GamePlayer")]
	public partial class GamePlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GamePlayerId;
		
		private int _GameId;
		
		private int _PlayerId;
		
		private int _Seat;
		
		private int _MarksWon;
		
		private int _MarksLost;
		
		private int _LowMarksWon;
		
		private int _LowMarksLost;
		
		private System.Nullable<int> _BidsMadeSum;
		
		private System.Nullable<int> _BidsSetSum;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Player> _Player;
		
		private EntitySet<GamePlayerBid> _GamePlayerBid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGamePlayerIdChanging(int value);
    partial void OnGamePlayerIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnSeatChanging(int value);
    partial void OnSeatChanged();
    partial void OnMarksWonChanging(int value);
    partial void OnMarksWonChanged();
    partial void OnMarksLostChanging(int value);
    partial void OnMarksLostChanged();
    partial void OnLowMarksWonChanging(int value);
    partial void OnLowMarksWonChanged();
    partial void OnLowMarksLostChanging(int value);
    partial void OnLowMarksLostChanged();
    partial void OnBidsMadeSumChanging(System.Nullable<int> value);
    partial void OnBidsMadeSumChanged();
    partial void OnBidsSetSumChanging(System.Nullable<int> value);
    partial void OnBidsSetSumChanged();
    #endregion
		
		public GamePlayer()
		{
			this._Game = default(EntityRef<Game>);
			this._Player = default(EntityRef<Player>);
			this._GamePlayerBid = new EntitySet<GamePlayerBid>(new Action<GamePlayerBid>(this.attach_GamePlayerBid), new Action<GamePlayerBid>(this.detach_GamePlayerBid));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePlayerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GamePlayerId
		{
			get
			{
				return this._GamePlayerId;
			}
			set
			{
				if ((this._GamePlayerId != value))
				{
					this.OnGamePlayerIdChanging(value);
					this.SendPropertyChanging();
					this._GamePlayerId = value;
					this.SendPropertyChanged("GamePlayerId");
					this.OnGamePlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat", DbType="Int NOT NULL")]
		public int Seat
		{
			get
			{
				return this._Seat;
			}
			set
			{
				if ((this._Seat != value))
				{
					this.OnSeatChanging(value);
					this.SendPropertyChanging();
					this._Seat = value;
					this.SendPropertyChanged("Seat");
					this.OnSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarksWon", DbType="Int NOT NULL")]
		public int MarksWon
		{
			get
			{
				return this._MarksWon;
			}
			set
			{
				if ((this._MarksWon != value))
				{
					this.OnMarksWonChanging(value);
					this.SendPropertyChanging();
					this._MarksWon = value;
					this.SendPropertyChanged("MarksWon");
					this.OnMarksWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarksLost", DbType="Int NOT NULL")]
		public int MarksLost
		{
			get
			{
				return this._MarksLost;
			}
			set
			{
				if ((this._MarksLost != value))
				{
					this.OnMarksLostChanging(value);
					this.SendPropertyChanging();
					this._MarksLost = value;
					this.SendPropertyChanged("MarksLost");
					this.OnMarksLostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowMarksWon", DbType="Int NOT NULL")]
		public int LowMarksWon
		{
			get
			{
				return this._LowMarksWon;
			}
			set
			{
				if ((this._LowMarksWon != value))
				{
					this.OnLowMarksWonChanging(value);
					this.SendPropertyChanging();
					this._LowMarksWon = value;
					this.SendPropertyChanged("LowMarksWon");
					this.OnLowMarksWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowMarksLost", DbType="Int NOT NULL")]
		public int LowMarksLost
		{
			get
			{
				return this._LowMarksLost;
			}
			set
			{
				if ((this._LowMarksLost != value))
				{
					this.OnLowMarksLostChanging(value);
					this.SendPropertyChanging();
					this._LowMarksLost = value;
					this.SendPropertyChanged("LowMarksLost");
					this.OnLowMarksLostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidsMadeSum", DbType="Int")]
		public System.Nullable<int> BidsMadeSum
		{
			get
			{
				return this._BidsMadeSum;
			}
			set
			{
				if ((this._BidsMadeSum != value))
				{
					this.OnBidsMadeSumChanging(value);
					this.SendPropertyChanging();
					this._BidsMadeSum = value;
					this.SendPropertyChanged("BidsMadeSum");
					this.OnBidsMadeSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidsSetSum", DbType="Int")]
		public System.Nullable<int> BidsSetSum
		{
			get
			{
				return this._BidsSetSum;
			}
			set
			{
				if ((this._BidsSetSum != value))
				{
					this.OnBidsSetSumChanging(value);
					this.SendPropertyChanging();
					this._BidsSetSum = value;
					this.SendPropertyChanged("BidsSetSum");
					this.OnBidsSetSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GamePlayer_GameId", Storage="_Game", ThisKey="GameId", OtherKey="GameId", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GamePlayer.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GamePlayer.Add(this);
						this._GameId = value.GameId;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GamePlayer_PlayerId", Storage="_Player", ThisKey="PlayerId", OtherKey="PlayerId", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.GamePlayer.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.GamePlayer.Add(this);
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GamePlayerBid_PlayerId_GameId", Storage="_GamePlayerBid", ThisKey="PlayerId,GameId", OtherKey="PlayerId,GameId", DeleteRule="NO ACTION")]
		public EntitySet<GamePlayerBid> GamePlayerBid
		{
			get
			{
				return this._GamePlayerBid;
			}
			set
			{
				this._GamePlayerBid.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlayerBid(GamePlayerBid entity)
		{
			this.SendPropertyChanging();
			entity.GamePlayer = this;
		}
		
		private void detach_GamePlayerBid(GamePlayerBid entity)
		{
			this.SendPropertyChanging();
			entity.GamePlayer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GamePlayerBid")]
	public partial class GamePlayerBid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GamePlayerBidId;
		
		private int _PlayerId;
		
		private int _GameId;
		
		private byte _HandCount;
		
		private byte _BidPosition;
		
		private byte _Amount;
		
		private short _TrumpSuit;
		
		private bool _IsLow;
		
		private bool _IsWinning;
		
		private bool _WasMade;
		
		private byte _TricksPlayed;
		
		private string _Hand;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<GamePlayer> _GamePlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGamePlayerBidIdChanging(int value);
    partial void OnGamePlayerBidIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnHandCountChanging(byte value);
    partial void OnHandCountChanged();
    partial void OnBidPositionChanging(byte value);
    partial void OnBidPositionChanged();
    partial void OnAmountChanging(byte value);
    partial void OnAmountChanged();
    partial void OnTrumpSuitChanging(short value);
    partial void OnTrumpSuitChanged();
    partial void OnIsLowChanging(bool value);
    partial void OnIsLowChanged();
    partial void OnIsWinningChanging(bool value);
    partial void OnIsWinningChanged();
    partial void OnWasMadeChanging(bool value);
    partial void OnWasMadeChanged();
    partial void OnTricksPlayedChanging(byte value);
    partial void OnTricksPlayedChanged();
    partial void OnHandChanging(string value);
    partial void OnHandChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public GamePlayerBid()
		{
			this._GamePlayer = default(EntityRef<GamePlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePlayerBidId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GamePlayerBidId
		{
			get
			{
				return this._GamePlayerBidId;
			}
			set
			{
				if ((this._GamePlayerBidId != value))
				{
					this.OnGamePlayerBidIdChanging(value);
					this.SendPropertyChanging();
					this._GamePlayerBidId = value;
					this.SendPropertyChanged("GamePlayerBidId");
					this.OnGamePlayerBidIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._GamePlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._GamePlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandCount", DbType="TinyInt NOT NULL")]
		public byte HandCount
		{
			get
			{
				return this._HandCount;
			}
			set
			{
				if ((this._HandCount != value))
				{
					this.OnHandCountChanging(value);
					this.SendPropertyChanging();
					this._HandCount = value;
					this.SendPropertyChanged("HandCount");
					this.OnHandCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidPosition", DbType="TinyInt NOT NULL")]
		public byte BidPosition
		{
			get
			{
				return this._BidPosition;
			}
			set
			{
				if ((this._BidPosition != value))
				{
					this.OnBidPositionChanging(value);
					this.SendPropertyChanging();
					this._BidPosition = value;
					this.SendPropertyChanged("BidPosition");
					this.OnBidPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="TinyInt NOT NULL")]
		public byte Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrumpSuit", DbType="SmallInt NOT NULL")]
		public short TrumpSuit
		{
			get
			{
				return this._TrumpSuit;
			}
			set
			{
				if ((this._TrumpSuit != value))
				{
					this.OnTrumpSuitChanging(value);
					this.SendPropertyChanging();
					this._TrumpSuit = value;
					this.SendPropertyChanged("TrumpSuit");
					this.OnTrumpSuitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLow", DbType="Bit NOT NULL")]
		public bool IsLow
		{
			get
			{
				return this._IsLow;
			}
			set
			{
				if ((this._IsLow != value))
				{
					this.OnIsLowChanging(value);
					this.SendPropertyChanging();
					this._IsLow = value;
					this.SendPropertyChanged("IsLow");
					this.OnIsLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWinning", DbType="Bit NOT NULL")]
		public bool IsWinning
		{
			get
			{
				return this._IsWinning;
			}
			set
			{
				if ((this._IsWinning != value))
				{
					this.OnIsWinningChanging(value);
					this.SendPropertyChanging();
					this._IsWinning = value;
					this.SendPropertyChanged("IsWinning");
					this.OnIsWinningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasMade", DbType="Bit NOT NULL")]
		public bool WasMade
		{
			get
			{
				return this._WasMade;
			}
			set
			{
				if ((this._WasMade != value))
				{
					this.OnWasMadeChanging(value);
					this.SendPropertyChanging();
					this._WasMade = value;
					this.SendPropertyChanged("WasMade");
					this.OnWasMadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TricksPlayed", DbType="TinyInt NOT NULL")]
		public byte TricksPlayed
		{
			get
			{
				return this._TricksPlayed;
			}
			set
			{
				if ((this._TricksPlayed != value))
				{
					this.OnTricksPlayedChanging(value);
					this.SendPropertyChanging();
					this._TricksPlayed = value;
					this.SendPropertyChanged("TricksPlayed");
					this.OnTricksPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Hand
		{
			get
			{
				return this._Hand;
			}
			set
			{
				if ((this._Hand != value))
				{
					this.OnHandChanging(value);
					this.SendPropertyChanging();
					this._Hand = value;
					this.SendPropertyChanged("Hand");
					this.OnHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GamePlayerBid_PlayerId_GameId", Storage="_GamePlayer", ThisKey="PlayerId,GameId", OtherKey="PlayerId,GameId", IsForeignKey=true)]
		public GamePlayer GamePlayer
		{
			get
			{
				return this._GamePlayer.Entity;
			}
			set
			{
				GamePlayer previousValue = this._GamePlayer.Entity;
				if (((previousValue != value) 
							|| (this._GamePlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GamePlayer.Entity = null;
						previousValue.GamePlayerBid.Remove(this);
					}
					this._GamePlayer.Entity = value;
					if ((value != null))
					{
						value.GamePlayerBid.Add(this);
						this._PlayerId = value.PlayerId;
						this._GameId = value.GameId;
					}
					else
					{
						this._PlayerId = default(int);
						this._GameId = default(int);
					}
					this.SendPropertyChanged("GamePlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private string _PlayerName;
		
		private string _Password;
		
		private string _Email;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private string _Comment;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private System.Nullable<System.DateTime> _LastActivityDate;
		
		private System.Nullable<System.DateTime> _LastPasswordChangeDate;
		
		private System.Nullable<System.DateTime> _LastLockoutDate;
		
		private int _RoleId;
		
		private EntitySet<GamePlayer> _GamePlayer;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<SavedHand> _SavedHand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnLastActivityDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivityDateChanged();
    partial void OnLastPasswordChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPasswordChangeDateChanged();
    partial void OnLastLockoutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLockoutDateChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public Player()
		{
			this._GamePlayer = new EntitySet<GamePlayer>(new Action<GamePlayer>(this.attach_GamePlayer), new Action<GamePlayer>(this.detach_GamePlayer));
			this._Role = default(EntityRef<Role>);
			this._SavedHand = new EntitySet<SavedHand>(new Action<SavedHand>(this.attach_SavedHand), new Action<SavedHand>(this.detach_SavedHand));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="VarChar(500)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="VarChar(500)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPasswordChangeDate
		{
			get
			{
				return this._LastPasswordChangeDate;
			}
			set
			{
				if ((this._LastPasswordChangeDate != value))
				{
					this.OnLastPasswordChangeDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangeDate = value;
					this.SendPropertyChanged("LastPasswordChangeDate");
					this.OnLastPasswordChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GamePlayer_PlayerId", Storage="_GamePlayer", ThisKey="PlayerId", OtherKey="PlayerId", DeleteRule="NO ACTION")]
		public EntitySet<GamePlayer> GamePlayer
		{
			get
			{
				return this._GamePlayer;
			}
			set
			{
				this._GamePlayer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Player_Role_RoleId", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Player.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Player.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SavedHand_PlayerId", Storage="_SavedHand", ThisKey="PlayerId", OtherKey="PlayerId", DeleteRule="NO ACTION")]
		public EntitySet<SavedHand> SavedHand
		{
			get
			{
				return this._SavedHand;
			}
			set
			{
				this._SavedHand.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlayer(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_GamePlayer(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_SavedHand(SavedHand entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_SavedHand(SavedHand entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private EntitySet<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    #endregion
		
		public Role()
		{
			this._Player = new EntitySet<Player>(new Action<Player>(this.attach_Player), new Action<Player>(this.detach_Player));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateUser", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Player_Role_RoleId", Storage="_Player", ThisKey="RoleId", OtherKey="RoleId", DeleteRule="NO ACTION")]
		public EntitySet<Player> Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				this._Player.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Player(Player entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Player(Player entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SavedHand")]
	public partial class SavedHand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SavedHandId;
		
		private int _PlayerId;
		
		private string _Hand;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSavedHandIdChanging(int value);
    partial void OnSavedHandIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnHandChanging(string value);
    partial void OnHandChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public SavedHand()
		{
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavedHandId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SavedHandId
		{
			get
			{
				return this._SavedHandId;
			}
			set
			{
				if ((this._SavedHandId != value))
				{
					this.OnSavedHandIdChanging(value);
					this.SendPropertyChanging();
					this._SavedHandId = value;
					this.SendPropertyChanged("SavedHandId");
					this.OnSavedHandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Hand
		{
			get
			{
				return this._Hand;
			}
			set
			{
				if ((this._Hand != value))
				{
					this.OnHandChanging(value);
					this.SendPropertyChanging();
					this._Hand = value;
					this.SendPropertyChanged("Hand");
					this.OnHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SavedHand_PlayerId", Storage="_Player", ThisKey="PlayerId", OtherKey="PlayerId", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.SavedHand.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.SavedHand.Add(this);
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trick")]
	public partial class Trick : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrickId;
		
		private int _GameId;
		
		private byte _HandCount;
		
		private byte _TrickOrder;
		
		private string _Bones;
		
		private byte _LeadSeat;
		
		private byte _WinSeat;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrickIdChanging(int value);
    partial void OnTrickIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnHandCountChanging(byte value);
    partial void OnHandCountChanged();
    partial void OnTrickOrderChanging(byte value);
    partial void OnTrickOrderChanged();
    partial void OnBonesChanging(string value);
    partial void OnBonesChanged();
    partial void OnLeadSeatChanging(byte value);
    partial void OnLeadSeatChanged();
    partial void OnWinSeatChanging(byte value);
    partial void OnWinSeatChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Trick()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrickId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrickId
		{
			get
			{
				return this._TrickId;
			}
			set
			{
				if ((this._TrickId != value))
				{
					this.OnTrickIdChanging(value);
					this.SendPropertyChanging();
					this._TrickId = value;
					this.SendPropertyChanged("TrickId");
					this.OnTrickIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandCount", DbType="TinyInt NOT NULL")]
		public byte HandCount
		{
			get
			{
				return this._HandCount;
			}
			set
			{
				if ((this._HandCount != value))
				{
					this.OnHandCountChanging(value);
					this.SendPropertyChanging();
					this._HandCount = value;
					this.SendPropertyChanged("HandCount");
					this.OnHandCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrickOrder", DbType="TinyInt NOT NULL")]
		public byte TrickOrder
		{
			get
			{
				return this._TrickOrder;
			}
			set
			{
				if ((this._TrickOrder != value))
				{
					this.OnTrickOrderChanging(value);
					this.SendPropertyChanging();
					this._TrickOrder = value;
					this.SendPropertyChanged("TrickOrder");
					this.OnTrickOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bones", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Bones
		{
			get
			{
				return this._Bones;
			}
			set
			{
				if ((this._Bones != value))
				{
					this.OnBonesChanging(value);
					this.SendPropertyChanging();
					this._Bones = value;
					this.SendPropertyChanged("Bones");
					this.OnBonesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadSeat", DbType="TinyInt NOT NULL")]
		public byte LeadSeat
		{
			get
			{
				return this._LeadSeat;
			}
			set
			{
				if ((this._LeadSeat != value))
				{
					this.OnLeadSeatChanging(value);
					this.SendPropertyChanging();
					this._LeadSeat = value;
					this.SendPropertyChanged("LeadSeat");
					this.OnLeadSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinSeat", DbType="TinyInt NOT NULL")]
		public byte WinSeat
		{
			get
			{
				return this._WinSeat;
			}
			set
			{
				if ((this._WinSeat != value))
				{
					this.OnWinSeatChanging(value);
					this.SendPropertyChanging();
					this._WinSeat = value;
					this.SendPropertyChanged("WinSeat");
					this.OnWinSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Trick_GameId", Storage="_Game", ThisKey="GameId", OtherKey="GameId", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Trick.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Trick.Add(this);
						this._GameId = value.GameId;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_Applications")]
	public partial class Vw_aspnet_Applications
	{
		
		public Vw_aspnet_Applications()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_MembershipUsers")]
	public partial class Vw_aspnet_MembershipUsers
	{
		
		public Vw_aspnet_MembershipUsers()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_Profiles")]
	public partial class Vw_aspnet_Profiles
	{
		
		public Vw_aspnet_Profiles()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_Roles")]
	public partial class Vw_aspnet_Roles
	{
		
		public Vw_aspnet_Roles()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_Users")]
	public partial class Vw_aspnet_Users
	{
		
		public Vw_aspnet_Users()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_UsersInRoles")]
	public partial class Vw_aspnet_UsersInRoles
	{
		
		public Vw_aspnet_UsersInRoles()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_WebPartState_Paths")]
	public partial class Vw_aspnet_WebPartState_Paths
	{
		
		public Vw_aspnet_WebPartState_Paths()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_WebPartState_Shared")]
	public partial class Vw_aspnet_WebPartState_Shared
	{
		
		public Vw_aspnet_WebPartState_Shared()
		{
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vw_aspnet_WebPartState_User")]
	public partial class Vw_aspnet_WebPartState_User
	{
		
		public Vw_aspnet_WebPartState_User()
		{
		}
	}
}
#pragma warning restore 1591
